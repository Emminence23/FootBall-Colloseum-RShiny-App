# Optional: Plot a histogram
hist(results,
breaks = 50,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
simulate_first_duplicate <- function(n_people = 1000, n_trials = 1000) {
duplicate_positions <- integer(n_trials)
for (i in 1:n_trials) {
birthdays <- sample(1:365, n_people, replace = TRUE)
seen <- integer(365)
for (j in 1:n_people) {
if (seen[birthdays[j]] > 0) {
duplicate_positions[i] <- j
break
} else {
seen[birthdays[j]] <- 1
}
}
}
return(duplicate_positions)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 50,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
simulate_first_duplicate <- function(n_people = 366, n_trials = 10000) {
duplicate_positions <- integer(n_trials)
for (i in 1:n_trials) {
birthdays <- sample(1:365, n_people, replace = TRUE)
seen <- integer(365)
for (j in 1:n_people) {
if (seen[birthdays[j]] > 0) {
duplicate_positions[i] <- j
break
} else {
seen[birthdays[j]] <- 1
}
}
}
return(duplicate_positions)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 50,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
simulate_first_duplicate <- function(n_people = 366, n_trials = 10000) {
first_person <- integer(n_trials)
for (i in 1:n_trials) {
seen <- numeric(365)
for (j in 1:n_people) {
birthday <- runif(1,min = 1, max = 365)
if (seen[birthday] > 0) {
first_person[i] <- j
break
} else {
seen[birthday] <- 1
}
}
}
return(first_person)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 50,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
simulate_first_duplicate <- function(n_people = 366, n_trials = 100000) {
first_person <- integer(n_trials)
for (i in 1:n_trials) {
seen <- numeric(365)
for (j in 1:n_people) {
birthday <- runif(1,min = 1, max = 365)
if (seen[birthday] > 0) {
first_person[i] <- j
break
} else {
seen[birthday] <- 1
}
}
}
return(first_person)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 10,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
# Optional: Plot a histogram
hist(results,
breaks = 100,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
simulate_first_duplicate <- function(n_trials = 1000000) {
first_person <- integer(n_trials)
for (i in 1:n_trials) {
seen <- numeric(365)
while(TRUE){
birthday <- runif(1,min = 1, max = 365)
if (seen[birthday] > 0) {
first_person[i] <- j
break
} else {
seen[birthday] <- 1
}
}
}
return(first_person)
}
# Run the simulation
results <- simulate_first_duplicate()
simulate_first_duplicate <- function(n_trials = 1000000) {
first_person <- integer(n_trials)
for (i in 1:n_trials) {
seen <- numeric(365)
j <- 1
while(TRUE) {
birthday <- runif(1,min = 1, max = 365)
if (seen[birthday] > 0) {
first_person[i] <- j
break
} else {
seen[birthday] <- 1
}
j <- j+1
}
}
return(first_person)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 100,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
print(position_freq[0])
print(position_freq[1])
print(position_freq[19])
simulate_first_duplicate <- function(n_trials = 1000000) {
first_person <- integer(n_trials)
for (i in 1:n_trials) {
seen <- numeric(365)
j <- 1
while(TRUE) {
birthday <- runif(1,min = 1, max = 365)
if (seen[birthday] > 0) {
first_person[i] <- j
break
} else {
seen[birthday] <- 1
}
j <- j+1
if(j > 30){
first_person[i] <- j
break
}
}
}
return(first_person)
}
# Run the simulation
results <- simulate_first_duplicate()
# Tabulate how often each position is the first duplicate
position_freq <- table(results)
# Display most frequent first duplicate positions
print(head(sort(position_freq, decreasing = TRUE), 10))
# Optional: Plot a histogram
hist(results,
breaks = 100,
col = "skyblue",
main = "Distribution of First Duplicate Birthday Position",
xlab = "Position of First Duplicate",
ylab = "Frequency")
print(position_freq[19])
simulate_obtuse_prob <- function(n_trials = 1e6) {
count <- 0
for (i in 1:n_trials) {
x <- runif(3)  # a, b, c from [0,1]
x2 <- x^2
max_sq <- max(x2)
sum_others <- sum(x2) - max_sq
if (max_sq > sum_others) {
count <- count + 1
}
}
return(count / n_trials)
}
# Run simulation
prob_estimate <- simulate_obtuse_prob()
cat("Estimated Probability =", prob_estimate, "\n")
for (i in 1:n_trials) {
x <- runif(3)  # a, b, c from [0,1]
x2 <- x^2
max_sq <- max(x2)
sum_others <- sum(x2) - max_sq
if (max_sq > sum_others) {
count <- count + 1
}
}
for (i in 1:1e5) {
x <- runif(3)  # a, b, c from [0,1]
x2 <- x^2
max_sq <- max(x2)
sum_others <- sum(x2) - max_sq
if (max_sq > sum_others) {
count <- count + 1
}
}
simulate_obtuse_prob <- function(n_trials = 1e6) {
count <- 0
for (i in 1:n_trials) {
x <- runif(3)  # a, b, c from [0,1]
x2 <- x^2
max_sq <- max(x2)
sum_others <- sum(x2) - max_sq
if (max_sq > sum_others) {
count <- count + 1
}
}
return(count / n_trials)
}
# Run simulation
prob_estimate <- simulate_obtuse_prob()
cat("Estimated Probability =", prob_estimate, "\n")
# Run simulation
prob_estimate <- simulate_obtuse_prob()
cat("Estimated Probability =", prob_estimate, "\n")
simulate_obtuse_prob <- function(n_trials = 1e7) {
count <- 0
for (i in 1:n_trials) {
x <- runif(3)  # a, b, c from [0,1]
x2 <- x^2
max_sq <- max(x2)
sum_others <- sum(x2) - max_sq
if (max_sq > sum_others) {
count <- count + 1
}
}
return(count / n_trials)
}
# Run simulation
prob_estimate <- simulate_obtuse_prob()
cat("Estimated Probability =", prob_estimate, "\n")
setwd("D:/Course Resources/MTH208/mth-208-course-project-24group-1")
shiny::runApp('ShinyApp')
install dplyr
install.packages("dplyr")
runApp('ShinyApp')
setwd("D:/Course Resources/MTH208/mth-208-course-project-24group-1/ShinyApp")
runApp()
runApp()
install.packages("GGally")
runApp()
install.packages("viridis")
runApp()
runApp()
install.packages("hrbrthemes")
runApp()
shiny::runApp()
install.packages("DT")
runApp()
install.packages(c(shiny))
installed.packages()
install.packages(shiny)
install.packages(shinyjs)
install.packages(shinyqui)
install.packages('shiny')
install dplyr
install.packages(c('shiny','dplyr')
)
shiny::runApp()
# Render Radar Plot
output$radarPlot <- renderPlot(
height = 350,
{
# Prepare data for radar chart
radar_data <- selected_data() %>%
select(-Player, -Season)  # Ensure only numerical stats remain
# Add min and max rows for fmsb radar chart scaling
radar_data <- rbind(rep(max(radar_data), ncol(radar_data)), rep(0, ncol(radar_data)), radar_data)
# Colors for radar chart
colors_border <- c("#40c9a252", "#a056b256", "#ffd16677")
colors_in <- c(rgb(0.25, 0.78, 0.64, 0.45), rgb(0.63, 0.34, 0.7, 0.45), rgb(1, 0.87, 0.34, 0.5))
# Plot radar chart
radarchart(
radar_data, axistype = 1, cex = 1,
pcol = colors_border, pfcol = colors_in, plwd = 4, plty = 1,
cglcol = "grey15", cglty = 1, axislabcol = "grey25",
cglwd = 0.8,
calcex = 0.9,
palcex = 0.9,
vlcex = 0.9
)
# Add legend
legend_labels <- paste(selected_data()$Player, selected_data()$Season, sep = " - ")
legend("right", legend = legend_labels, bty = "n", pch = 20,
col = colors_in, text.col = "grey20", cex = 1.2, pt.cex = 3)
}
)
runApp()
runApp()
